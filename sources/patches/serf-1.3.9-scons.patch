1. apply py3 compat patch from https://github.com/clearlinux-pkgs/serf/blob/master/sconscript-python3.patch
2. fix OpenSSL 1.1.0+ lib
3. add more msvc toolset defines, 14.3 for VS2022, 14.2 for VS2019, 14.1 for VS2017
--- serf-1.3.9.orig/SConstruct
+++ serf-1.3.9/SConstruct
@@ -55,7 +55,7 @@ def RawListVariable(key, help, default):
 # To be used to ensure a PREFIX directory is only created when installing.
 def createPathIsDirCreateWithTarget(target):
   def my_validator(key, val, env):
-    build_targets = (map(str, BUILD_TARGETS))
+    build_targets = (list(map(str, BUILD_TARGETS)))
     if target in build_targets:
       return PathVariable.PathIsDirCreate(key, val, env)
     else:
@@ -140,8 +140,20 @@ if sys.platform == 'win32':
     EnumVariable('MSVC_VERSION',
                  "Visual C++ to use for building (E.g. 11.0, 9.0)",
                  None,
-                 allowed_values=('14.0', '12.0',
-                                 '11.0', '10.0', '9.0', '8.0', '6.0')
+                 allowed_values=('14.3', '14.2', '14.1', '14.0', '12.0',
+                                 '11.0', '10.0', '9.0', '8.0', '7.1', '7.0', '6.0'),
+                 map={'2002' : '7.0',
+                      '2003' : '7.1',
+                      '2005' : '8.0',
+                      '2008' : '9.0',
+                      '2010' : '10.0',
+                      '2012' : '11.0',
+                      '2013' : '12.0',
+                      '2015' : '14.0',
+                      '2017' : '14.1',
+                      '2019' : '14.2',
+                      '2022' : '14.3'
+                     },
                 ),
 
     # We always documented that we handle an install layout, but in fact we
@@ -166,7 +178,7 @@ env.Append(BUILDERS = {
 match = re.search('SERF_MAJOR_VERSION ([0-9]+).*'
                   'SERF_MINOR_VERSION ([0-9]+).*'
                   'SERF_PATCH_VERSION ([0-9]+)',
-                  env.File('serf.h').get_contents(),
+                  env.File('serf.h').get_contents().decode('utf-8'),
                   re.DOTALL)
 MAJOR, MINOR, PATCH = [int(x) for x in match.groups()]
 env.Append(MAJOR=str(MAJOR))
@@ -183,7 +195,7 @@ CALLOUT_OKAY = not (env.GetOption('clean') or env.GetOption('help'))
 
 unknown = opts.UnknownVariables()
 if unknown:
-  print 'Warning: Used unknown variables:', ', '.join(unknown.keys())
+  print('Warning: Used unknown variables:', ', '.join(unknown.keys()))
 
 apr = str(env['APR'])
 apu = str(env['APU'])
@@ -335,16 +347,21 @@ if sys.platform == 'win32':
                LIBPATH=['$ZLIB'])
 
   # openssl
-  env.Append(LIBS=['libeay32.lib', 'ssleay32.lib'])
   if not env.get('SOURCE_LAYOUT', None):
     env.Append(CPPPATH=['$OPENSSL/include/openssl'],
                LIBPATH=['$OPENSSL/lib'])
-  elif 0: # opensslstatic:
-    env.Append(CPPPATH=['$OPENSSL/inc32'],
-               LIBPATH=['$OPENSSL/out32'])
   else:
     env.Append(CPPPATH=['$OPENSSL/inc32'],
                LIBPATH=['$OPENSSL/out32dll'])
+  conf = Configure(env)
+  if conf.CheckLib('libcrypto'):
+    # OpenSSL 1.1.0+
+    env.Append(LIBS=['libcrypto.lib', 'libssl.lib'])
+  else:
+    # Legacy OpenSSL
+    env.Append(LIBS=['libeay32.lib', 'ssleay32.lib'])
+  conf.Finish()
+
 else:
   if os.path.isdir(apr):
     apr = os.path.join(apr, 'bin', 'apr-1-config')
